[tox]
envlist = py38
isolated_build = true

[testenv]
deps = -r requirements/test.txt
setenv =
  JUPYTER_PLATFORM_DIRS = 1
commands = pytest

[testenv:nightly]
deps =
  # Add your dependencies here, should be same as in pyproject.toml, but use
  # versions from GitHub 'main' branch for upstream Scipp dependencies.
  # Example:
  #   sciline @ git+https://github.com/scipp/sciline@main
  plopp @ git+https://github.com/scipp/plopp@main
  sciline @ git+https://github.com/scipp/sciline@main
  scippneutron @ git+https://github.com/scipp/scippneutron@main
  pytest
  autodoc_pydantic
  ipykernel
  ipython!=8.7.0  # Breaks syntax highlighting in Jupyter code cells.
  myst-parser
  nbsphinx
  pydata-sphinx-theme>=0.13
  sphinx
  sphinx-autodoc-typehints==1.23.0  # Higher versions require sphinx-7, which is not supported by sphinx-design yet
  sphinx-copybutton
  sphinx-design
setenv =
  JUPYTER_PLATFORM_DIRS = 1
commands = pytest
           python -m sphinx -j2 -v -b html -d {toxworkdir}/docs_doctrees docs html
           python -m sphinx -j2 -v -b doctest -d {toxworkdir}/docs_doctrees docs html

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
deps = -r requirements/docs.txt
allowlist_externals=find
commands = python -m sphinx -j2 -v -b html -d {toxworkdir}/docs_doctrees docs html
           python -m sphinx -j2 -v -b doctest -d {toxworkdir}/docs_doctrees docs html
           find html -type f -name "*.ipynb" -not -path "html/_sources/*" -delete

[testenv:releasedocs]
description = invoke sphinx-build to build the HTML docs from a released version
skip_install = true
deps =
  esssans=={posargs}
  {[testenv:docs]deps}
allowlist_externals={[testenv:docs]allowlist_externals}
commands = {[testenv:docs]commands}

[testenv:linkcheck]
description = Run Sphinx linkcheck
deps = -r requirements/docs.txt
commands = python -m sphinx -j2 -v -b linkcheck -d {toxworkdir}/docs_doctrees docs html

[testenv:static]
description = Code formatting and static analysis
skip_install = true
deps = -r requirements/static.txt
allowlist_externals = sh
# The first run of pre-commit may reformat files. If this happens, it returns 1 but this
# should not fail the job. So just run again if it fails. A second failure means that
# either the different formatters can't agree on a format or that static analysis failed.
commands = sh -c 'pre-commit run -a || (echo "" && pre-commit run -a)'

[testenv:mypy]
description = Type checking (mypy)
deps = -r requirements/mypy.txt
commands = python -m mypy .

[testenv:deps]
description = Update dependencies by running pip-compile-multi
deps = pip-compile-multi
skip_install = true
changedir = requirements
commands = pip-compile-multi -d .
